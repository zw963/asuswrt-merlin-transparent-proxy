#!/bin/sh

self="$(curl https://raw.githubusercontent.com/zw963/deployment_bash/v0.6.0/deploy_start.sh)" && eval "$self"
# self="$(cat ~/Project/deployment_bash/deploy_start.sh)" && eval "$self"

export target=$1

if grep -qs -e 'set_yours_password_here' server/ss-server/server.json; then
    echo "You must change \`[0m[33mset_yours_password_here[0m' to a NEW password in \`./server/ss-server/server.json'!"
    exit
fi

copy server/ss-server/server.json /etc/shadowsocks/config.json

deploy_start

set -eu

# Following code is execute on remote VPS

if which ssserver &>/dev/null; then
    echo 'ss-server is exist, skip deploy.'
    exit
fi

cat <<'HEREDOC' > /etc/sysctl.d/99-shadowsocks.conf
fs.file-max=51200

net.core.rmem_max=67108864
net.core.wmem_max=67108864
net.core.netdev_max_backlog=250000
net.core.somaxconn=4096

net.ipv4.tcp_syncookies=1
net.ipv4.tcp_tw_reuse=1
net.ipv4.tcp_fin_timeout=30
net.ipv4.tcp_keepalive_time=1200
net.ipv4.ip_local_port_range=10000 65000
net.ipv4.tcp_max_syn_backlog=8192
net.ipv4.tcp_max_tw_buckets=5000
net.ipv4.tcp_mem=25600 51200 102400
net.ipv4.tcp_rmem=4096 87380 67108864
net.ipv4.tcp_wmem=4096 65536 67108864
net.ipv4.tcp_mtu_probing=1

# 开启内核 fastopen, Linux 3.7 以上支持, 3.13 才默认开启.
# 等价于 echo 3 > /proc/sys/net/ipv4/tcp_fastopen
net.ipv4.tcp_fastopen=3
HEREDOC

if kernel_version_greater_than 4.9; then
    modprobe tcp_bbr && lsmod | grep bbr
    echo "net.core.default_qdisc=fq" >> /etc/sysctl.d/99-shadowsocks.conf
    echo "net.ipv4.tcp_congestion_control=bbr" >> /etc/sysctl.d/99-shadowsocks.conf
fi
sysctl -p > /dev/null

# test bbr is enabled
sysctl net.ipv4.tcp_available_congestion_control |grep bbr
sysctl -n net.ipv4.tcp_congestion_control |grep bbr

version='1.11.1'

# package compile-tools pcre-devel asciidoc xmlto mbedtls-devel \
#         udns-devel libev-devel libsodium-devel rng-tools c-ares-devel

# sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config

if [[ -e /etc/redhat-release && $(cat /etc/redhat-release) =~ CentOS ]]; then
    systemctl start rngd
    systemctl status rngd
elif [[ $(cat /etc/issue) =~ Ubuntu|Mint|Deepin ]]; then
    service rng-tools start
    service rng-tools status
fi

# https://github.com/shadowsocks/shadowsocks-rust/releases/download/v1.11.1/shadowsocks-v1.11.1.x86_64-unknown-linux-gnu.tar.xz
# [ -d shadowsocks-rust-${version} ] || download_and_extract https://github.com/shadowsocks/shadowsocks-rust/releases/download/v${version}/shadowsocks-v${version}.x86_64-unknown-linux-gnu.tar.xz

file=shadowsocks-v${version}.x86_64-unknown-linux-gnu.tar.xz
wget https://github.com/shadowsocks/shadowsocks-rust/releases/download/v${version}/$file
dest=shadowsocks-rust-${version}
mkdir -p $dest
tar -Jxvf $file -C "$dest"

cd $dest/ && cp -v sslocal ssserver ssurl ssmanager /usr/bin/ && cd ..

rm -f $file
rm -rf $dest

/usr/bin/ssserver --tcp-fast-open --config /etc/shadowsocks/config.json

# systemctl stop firewalld
# systemctl disable firewalld

daemon shadowsocks '/usr/bin/ssserver --tcp-fast-open --config /etc/shadowsocks/config.json'

# cat <<'HEREDOC' > /etc/systemd/system/shadowsocks@.service
#      [Unit]
#      Description=Shadowsocks-Libev Custom Server Service for %I
#      After=syslog.target network.target

#      [Service]
#      Type=simple
#      Restart=always
#      LimitCORE=infinity
#      LimitNOFILE=51200
#      LimitNPROC=51200
#      Environment=LD_LIBRARY_PATH=/usr/lib64
#      ExecStart=/usr/bin/ss-server -u --fast-open --no-delay -c /etc/shadowsocks/%i.json
#      ExecStop=/bin/kill -TERM $MAINPID
#      ExecReload=/bin/kill -HUP $MAINPID
#      PIDFile=/var/run/shadowsocks.pid

#      [Install]
#      WantedBy=multi-user.target
# HEREDOC

server_port=$(cat /etc/shadowsocks/config.json |grep 'server_port"' |grep -o '[0-9]*')
expose_port $server_port
